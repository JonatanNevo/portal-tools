cmake_minimum_required(VERSION 3.30)

file(READ "version" PROJECT_VERSION)
string(STRIP "${PROJECT_VERSION}" PROJECT_VERSION)
project({{module.name}} VERSION ${PROJECT_VERSION})

message(STATUS "Configuring ${PROJECT_NAME} - version: ${PROJECT_VERSION}")

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
{% if default_sources %}
file(GLOB_RECURSE {{ module.short_name | upper }}_SOURCES CONFIGURE_DEPENDS "portal/{{ module.subdirectory }}/*.cpp")
file(GLOB_RECURSE {{ module.short_name | upper }}_HEADER CONFIGURE_DEPENDS "portal/{{ module.subdirectory }}/*.h"){% endif %}
{% if portal_dependencies %}
option(PORTAL_FIND_PACAKGE "Whether or not to look for portal components" OFF) #OFF by default
if(PORTAL_FIND_PACAKGE)
    {% for dependency in portal_dependencies %}find_package({{ dependency.name }} CONFIG REQUIRED)
    {% endfor %}
endif ()
unset(PORTAL_FIND_PACAKGE CACHE)
{% endif %}
{% for dependency in dependencies %}
find_package({{ dependency.name }} CONFIG REQUIRED)
{% endfor %}
add_library({{ module.name }} STATIC {% raw %}${{% endraw %}{{module.short_name | upper}}_SOURCES{% raw %}}{% endraw %})
target_sources({{ module.name }} PUBLIC
        FILE_SET HEADERS
        BASE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}
        FILES {% raw %}${{% endraw %}{{module.short_name | upper}}_HEADERS{% raw %}}{% endraw %}
)

set_target_properties({{ module.name }} PROPERTIES EXPORT_NAME {{module.short_name}})

add_library(portal::{{module.short_name}} ALIAS {{ module.name }})
{% if dependencies or portal_dependencies %}
target_link_libraries({{ module.name }}
        PUBLIC
        {% for dependency in portal_dependencies %}{% if dependency.target %}{{ dependency.target }}
        {% endif %}{% endfor %}
        {% for dependency in dependencies %}{% if dependency.target %}{{ dependency.target }}
        {% endif %}{% endfor %}
)
{% endif %}
{% if special_cmake %}
{{ special_cmake }}
{% endif %}
install(TARGETS {{ module.name }}
        EXPORT {{ module.name }}-targets
        LIBRARY DESTINATION "${CMAKE_INSTALL_LIBDIR}"
        ARCHIVE DESTINATION "${CMAKE_INSTALL_LIBDIR}"
        RUNTIME DESTINATION "${CMAKE_INSTALL_BINDIR}"
        FILE_SET HEADERS DESTINATION include
)

# Generate and install the export targets
install(EXPORT {{ module.name }}-targets
        FILE {{ module.name }}-targets.cmake
        NAMESPACE portal::
        DESTINATION share/{{ module.name }}
)

# Create and install the config file
include(CMakePackageConfigHelpers)
write_basic_package_version_file(
        "${CMAKE_CURRENT_BINARY_DIR}/{{ module.name }}-config-version.cmake"
        VERSION ${PROJECT_VERSION}
        COMPATIBILITY SameMajorVersion
)
# To free it up for other add_subdirectories
unset(PROJECT_VERSION)

configure_package_config_file(
        "../cmake/{{ module.name }}-config.cmake.in"
        "${CMAKE_CURRENT_BINARY_DIR}/{{ module.name }}-config.cmake"
        INSTALL_DESTINATION share/{{ module.name }}
)

# Install the config files
install(FILES
        "${CMAKE_CURRENT_BINARY_DIR}/{{ module.name }}-config.cmake"
        "${CMAKE_CURRENT_BINARY_DIR}/{{ module.name }}-config-version.cmake"
        DESTINATION share/{{ module.name }}
)